{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isEditing","task","handleRemove","bind","assertThisInitialized","toggleForm","handleUpdate","handleChange","handleToggle","removeTodo","id","setState","event","preventDefault","updateTodo","defineProperty","target","name","value","toggleTodo","react_default","a","createElement","className","onSubmit","type","onChange","onClick","completed","Component","NewTodoForm","handleSubmit","createTodo","objectSpread","uuid","htmlFor","placeholder","TodoList","todos","create","remove","update","toggleCompletion","newTodo","concat","toConsumableArray","filter","todo","updatedTask","updatedTodos","map","_this2","src_Todo_0","key","src_NewTodoForm_0","App","src_TodoList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d2fbd2a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Todo.css';\r\n\r\nclass Todo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            task: this.props.task\r\n        }\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleToggle = this.handleToggle.bind(this);\r\n    }\r\n\r\n    handleRemove() {\r\n        this.props.removeTodo(this.props.id);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({ isEditing: !this.state.isEditing });\r\n    }\r\n\r\n    handleUpdate(event) {\r\n        event.preventDefault();\r\n        // take new task and pass up to parent\r\n        this.props.updateTodo(this.props.id, this.state.task);\r\n        this.toggleForm();\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    handleToggle(event) {\r\n        this.props.toggleTodo(this.props.id);\r\n    }\r\n\r\n    render() {\r\n        let result;\r\n        if (this.state.isEditing) {\r\n            result = (\r\n                <div className=\"Todo\">\r\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.task}\r\n                            name={\"task\"}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                        <button>Save</button>\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            result = (\r\n                <div className=\"Todo\">\r\n                    <li onClick={this.handleToggle} className={this.props.completed ? 'Todo-task completed' : \"Todo-task\"}>{this.props.task}</li>\r\n                    <div className=\"Todo-buttons\">\r\n                        <button onClick={this.toggleForm}><i className=\"fas fa-pen\"></i></button>\r\n                        <button onClick={this.handleRemove}><i className=\"fas fa-trash\"></i></button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react';\r\nimport uuid from 'uuid/v4';\r\nimport './NewTodoForm.css';\r\n\r\nclass NewTodoForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            task: \"\"\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.props.createTodo({ ...this.state, id: uuid(), completed: false });\r\n        this.setState({ task: \"\" });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"task\">New Todo</label>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"New Todo\"\r\n                    id=\"task\"\r\n                    name=\"task\"\r\n                    value={this.state.task}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <button>Add Todo</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewTodoForm;","import React, { Component } from 'react';\r\nimport Todo from './Todo'\r\nimport NewTodoForm from './NewTodoForm';\r\nimport './TodoList.css';\r\n\r\nclass TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: []\r\n        }\r\n        this.create = this.create.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.update = this.update.bind(this);\r\n        this.toggleCompletion = this.toggleCompletion.bind(this);\r\n    }\r\n\r\n    create(newTodo) {\r\n        this.setState({\r\n            todos: [...this.state.todos, newTodo]\r\n        })\r\n    }\r\n\r\n    remove(id) {\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => todo.id !== id)\r\n        })\r\n    }\r\n\r\n    update(id, updatedTask) {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if (todo.id === id) {\r\n                return { ...todo, task: updatedTask }\r\n            }\r\n            return todo;\r\n        });\r\n        this.setState({ todos: updatedTodos })\r\n    }\r\n\r\n    toggleCompletion(id) {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if (todo.id === id) {\r\n                return { ...todo, completed: !todo.completed }\r\n            }\r\n            return todo;\r\n        });\r\n        this.setState({ todos: updatedTodos })\r\n    }\r\n\r\n    render() {\r\n        const todos = this.state.todos.map(todo => {\r\n            return (\r\n                <Todo\r\n                    key={todo.id}\r\n                    id={todo.id}\r\n                    task={todo.task}\r\n                    completed={todo.completed}\r\n                    removeTodo={this.remove}\r\n                    updateTodo={this.update}\r\n                    toggleTodo={this.toggleCompletion}\r\n                />\r\n            )\r\n        })\r\n        return (\r\n            <div className=\"TodoList\">\r\n                <h1>\r\n                    Todo List! <span>A simple Todo List App</span>\r\n                </h1>\r\n                <ul>{todos}</ul>\r\n                <NewTodoForm createTodo={this.create} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}